CS 1520 Programming Languages for Web ApplicationsAssignment 2 Online: Friday, October 4, 2013 What is due: All of your .php files stored in your Unixs csweb/assig2 directory (with permissions set as indicated in acl-perms.html). You must also submit a .zip file containing all of your .php and data files plus an index.html file to the CS 1520 Submission site (see submit.html for details), with the following requirements:-    All pertinent grading information for the TA is on the index.html page – i.e. it is an Assignment Information Sheet for the project containing file, execution and extra credit information. Make sure to include in this sheet the AFS Path to all of your files.-    Your index.html file must also contain a link (url) to your program start page (at your csweb/assig2 directory), clearly labeled.As with Assignment 1, the idea is the following: -    To grade your project your TA could go to the submission site. There, in your directory, she could see your .zip file, unzip it, then see and open your index.html file in her browser.-    She could then read your pertinent submission information, and then click on the link to your actual program.-    She could then test your program through the link that you submitted-    To look at your code, she could also go to your csweb/mysql directory directly, so make sure the permissions are set properly and that your full AFS path is included in your index.html file. How it will be graded: Note that the points in the explanation above say "could" for the TA in each case, rather than "will". In actuality, the TA will not be doing these things – you will. Your program will be graded during an interactive session in which you demonstrate it for Qiao. You will have to sign-up for a demonstration slot in order to do this. An online sign-up sheet will be available for you to use at http://cs1520.cs.pitt.edu/~nomad/misc/schedule.php. This signup sheet will be online soon – I will post an announcement when the link becomes available. Sign up early so that you get the slot you want. You must login to the signup site using your MySQL database id and password. If you have not yet received these, see me ASAP to get them. If you do not do a demonstration, we will assume that you did not do the project, and you will receive no credit for it. Part of your grade will be based on explaining code segments and / or design to the TA. Come to the demonstration prepared to talk about your code.  During your demonstration you will be expected to access your email account, in order to verify that your program is sending mail correctly. When it is due: Monday, October 21, 2013, by 11:59PM.Late Due Date: Wednesday, October 23, 2013 by 11:59PMImportant Note: NO PROGRAM FILES in your csweb/assig2 directory should be modified after the submission deadlines!  If you need to use those files for something (ex: a subsequent assignment), COPY THEM INTO A DIFFERENT DIRECTORY.  Goal: To expand on the use of PHP and to also incorporate a simple MySQL database into a useful application. Specifications:You will re-implement your Doodle-ish program from Assignment 1 with the improvements / modifications indicated below.  Before reading these specifications, read over Assignment 1 again so that you are familiar with the original project requirements.1)    Your site will now have user accounts.  For each account you will minimally store the following information:a)     User nameb)     User email addressc)     User passwordd)     User schedules (ones created by the user)For the sake of clarity, account holders will be referred to as "makers" in the rest of this document.2)    Makers will log into the site by entering a valid email address and password. Invalid logins should direct the maker back to the login page with the appropriate error message.  A "Forgot Password" option must be included in the login page.  If selected, the "Forgot Password" option will cause the maker's password to be sent to the maker's email address.  Maker accounts (other than schedules) will be pre-initialized with a script (see more details below).  You do not have to allow interactive creation of new accounts (but can do so for extra credit – see details below).3)    Session variables should be used to keep track of logged in makers.  Once logged in, makers will have the following options:a)     Create a new schedule.  When selected, the script(s) will enable the maker to do the following:i)      Enter the name of the scheduleii)    Enter a list of dates / times for the schedule in some intuitive wayiii)   Enter a list of names and email addresses (these will be the users of the schedule – note that all users of the site do NOT have to have accounts – only makers (who will generate schedules) need accounts).iv)   Submit the schedule, after which a link to the site will be emailed to the list of addresses that were entered for that schedule.  Each new instance of a schedule will have an identifier to distinguish it from other instances.  This identifier will be embedded in the link (i.e. using GET) that is sent to the email recipients of the schedule.  Also embedded in the link will be an identifier to indicate the person that the link is being sent to.  Both of these identifiers will be used by the site to retrieve the information required for that schedule.  The idea is that when a user receives the email and clicks on the link the two identifiers in the URL will uniquely identify the schedule and user who will be accessing it.b)     Finalize a schedule.  For this option the maker will select an already existent schedule from his / her list of schedules.  Finalizing the schedule will do the following:i)      Count the number of users who have selected each available slot, and determine the slot with the greatest number of available users.  If there is a tie you may break it in an arbitrary way.ii)    Send an email to the list of users for the schedule indicating the chosen slot (date and time, nicely formatted).c)     Log out.  This should close any sessions accessed by the maker and after logging out a refresh of any previous pages will result in the login page.4)    Users who receive links to schedules do not have to log in – the links should connect them to the site with the appropriate schedule directly.  The format of the schedule shown should be the same / similar to that of Assignment 1 with the following modifications:a)     When a user connects via the link the schedule is shown with all of the user names on the rows.  The names are not editable by the users. The remaining information on a given row is editable by one user only. For users other than the current user that have not yet entered any information, the entries will be blank. The identifiers assigned to a user (and put into the URL) should identify the schedule and user, and should correlate with the appropriate row in the schedule.b)     As long as the user accesses the site using the appropriate link, he / she should be able to edit and submit the entry from any browser or machine – a cookie is no longer needed to identify the user.  However, only one entry is editable per user (accessing from the emailed link).5)    All long-term state information on the server will now be stored in a database rather than in flat files.  The database must be implemented with the following requirements:a)     The database must be the MySQL database for which you have received accounts (email me if you did not receive your account information)b)     You will need several tables in your database and the exact schema is up to you.  Think carefully about how you can effectively store the needed information in tables so that it can easily be updated and queried when necessary.  In particular, you will need to store information on:i)      Registered makers, including name, email, password and list of schedules.  Since a maker can have multiple schedules it makes sense to store schedules separate from the makers.ii)    Users of the site.  Even though these users will not log in their names and email information must be stored so it can be accessed by the schedules.iii)   Schedules, including all of the information about the schedule as indicated above.  If you think about this carefully you will realize that this will require multiple tables to implement effectively.   For example, if you have a table for makers and users and a table for schedule information (title, list of timeslots) you may have another table to relate these together in a many to many fashion.c)     You must have a script called "init.php" that initializes your database tables and puts in some makers. To make grading simpler, use variants of your email address for all email addresses in your program.  Since email addresses must be unique for makers, use the "+" symbol followed by some identifier in each of your email addresses.  For example, for email account schmoe@pitt.edu, addresss schmoe+maker1@pitt.edu and address schmoe+maker2@pitt.edu will both be delivered to schmoe@pitt.edu but they will be considered to be different in the MySQL database. When doing your demonstration, your TA will always first run init.php so make sure it initializes everything for your site to go live. Extra Credit Ideas:-      There are a LOT of different ways to enhance this project for extra credit.  A few are indicated below.  Note that you can get at most 10 grade points total for extra credit, so don't do more than will count for you.-      Have a login option for new makers.  This will allow a new maker to enter his / her information and that information will be put into the database.  Note that since the maker's email address is used as the key for a maker, you must verify that a given address does not already exist before accepting it.-      Have an edit option for a schedule.  This will allow a maker to update the days / times in a given schedule after it has been created.  Once done, an email / link should be sent to the email list for that schedule instructing the users to check the site again.-      Once a schedule has been finalized, in addition to sending a text version of the selected date / time, you also generate a .ics file that the user can easily enter into his / her calendar.  For help with this option you can Google "php ics file".  Note that you may use code from the Internet for this option but you must give credit to the author.